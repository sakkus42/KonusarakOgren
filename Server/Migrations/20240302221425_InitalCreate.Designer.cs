// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RickServer.Models;

#nullable disable

namespace RickServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240302221425_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("RickServer.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Episode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GetAllCharactersId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OriginId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GetAllCharactersId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OriginId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("RickServer.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Air_date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GetAllEpisodesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("characters")
                        .HasColumnType("TEXT");

                    b.Property<string>("episode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GetAllEpisodesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("RickServer.Models.GetAllCharacters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.ToTable("GetAllCharacter");
                });

            modelBuilder.Entity("RickServer.Models.GetAllEpisodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.ToTable("GetAllEpisode");
                });

            modelBuilder.Entity("RickServer.Models.Info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("next")
                        .HasColumnType("TEXT");

                    b.Property<string>("prev")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Infos");
                });

            modelBuilder.Entity("RickServer.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RickServer.Models.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("RickServer.Models.Character", b =>
                {
                    b.HasOne("RickServer.Models.GetAllCharacters", null)
                        .WithMany("Results")
                        .HasForeignKey("GetAllCharactersId");

                    b.HasOne("RickServer.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("RickServer.Models.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.Navigation("Location");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("RickServer.Models.Episode", b =>
                {
                    b.HasOne("RickServer.Models.GetAllEpisodes", null)
                        .WithMany("Results")
                        .HasForeignKey("GetAllEpisodesId");
                });

            modelBuilder.Entity("RickServer.Models.GetAllCharacters", b =>
                {
                    b.HasOne("RickServer.Models.Info", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("RickServer.Models.GetAllEpisodes", b =>
                {
                    b.HasOne("RickServer.Models.Info", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");

                    b.Navigation("Info");
                });

            modelBuilder.Entity("RickServer.Models.GetAllCharacters", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("RickServer.Models.GetAllEpisodes", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
